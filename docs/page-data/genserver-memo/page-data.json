{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/genserver-memo/",
    "result": {"data":{"site":{"siteMetadata":{"title":"Experience |> Blog.post"}},"markdownRemark":{"id":"5899c709-ea06-54e2-9078-0972862a73f9","excerpt":"『プログラミングElixir』(第1版)の「第16章 OTP:サーバ」を読んだメモを記していく。 GenServerコールバック GenServerには6つのコールバックがある。 を使うことによって、ユーザーは実装する必要のあるコーバルックだけ実装すれば良い。 init(start_arguments…","html":"<p>『プログラミングElixir』(第1版)の「第16章 OTP:サーバ」を読んだメモを記していく。</p>\n<h1>GenServerコールバック</h1>\n<p>GenServerには6つのコールバックがある。<br>\n<code class=\"language-text\">use Genserver</code>を使うことによって、ユーザーは実装する必要のあるコーバルックだけ実装すれば良い。</p>\n<h2>init(start_arguments)</h2>\n<p>新しいサーバ開始時にGenServerから呼ばれる。<br>\nサーバ開始に成功すれば<code class=\"language-text\">{:ok, state}</code>を返し、開始できないなら<code class=\"language-text\">{:stop, reason}</code>を返す。<br>\nタイムアウトの指定も可能。</p>\n<h2>handle_call(request, from, state)</h2>\n<p>クライアントが<code class=\"language-text\">GenServer.call(pid, request)</code>を使った時に呼ばれる。<br>\nrequestパラメータは、リクエストの種類をアトムで渡す(<code class=\"language-text\">:next_number</code>, <code class=\"language-text\">:set_number</code>など)<br>\nfromパラメータは、クライアントのPIDとユニークタグを含むタプル。<br>\nstateパラメータは、サーバの状態を持つ。</p>\n<p>成功時には<code class=\"language-text\">{:reply, result, new_state}</code>を返す。<br>\n実装されていないrequest種類が呼ばれると<code class=\"language-text\">:bad_call</code>エラーを返す。</p>\n<h2>handle_cast(request, state)</h2>\n<p><code class=\"language-text\">GenServer.cast(pid, request)</code>を使ったときに呼ばれる。<br>\nレスポンスが必要ない処理を実装する際に用いる。<br>\n成功時は<code class=\"language-text\">{:noreply, new_state}</code>や<code class=\"language-text\">{:stop, reason, new_state}</code>を返す。</p>\n<h2>handle_info(info, state)</h2>\n<p>timeoutメッセージ、リンクしたプロセスからの終了メッセージ、sendを用いてPIDへ送られたメッセージなど、callやcastリクエスト以外でやってくるメッセージを処理する。</p>\n<h2>terminate(reason, state)</h2>\n<p>サーバが終了しようとするときに呼ばれる。\r\nサーバに監視をつけてしまえば、これについて考える必要はない(要調査)</p>\n<h2>code_change(from_version, state, extra)</h2>\n<p>OTPが、走っているサーバを古いバージョンから新しいバージョンへ(無停止で)置き換える際に呼ばれる。<br>\n古い状態のフォーマットを新しいフォーマットへ変換するなどの処理を行う</p>\n<h2>format_status(reason, [pdict, state])</h2>\n<p><code class=\"language-text\">:sys.get_status pid</code>などサーバの状態の表示する際に表示方法をカスタマイズするために使う。</p>\n<h2>callとcastのレスポンス</h2>\n<p>callとcastのレスポンスには、いくつかのオプションを返すことができる</p>\n<ul>\n<li><strong>:hibernate</strong></li>\n</ul>\n<p><code class=\"language-text\">:hibernate</code>をレスポンスに含めた場合、次のリクエストまでメモリ上からサーバの状態を取り除き、次のリクエストがあれば状態を読み込んで復活する。<br>\nメモリを節約できるがCPUを余分に使う。</p>\n<ul>\n<li><strong>タイムアウトオプション</strong></li>\n</ul>\n<p><code class=\"language-text\">:infinite</code>かミリ秒を渡してタイムアウト時間を指定できる。<br>\nミリ秒が渡された場合は、その時間までにサーバが何もしない(次のリクエストを送らない？)ならタイムアウトメッセージが送られる。</p>\n<h3>レスポンスのパターン</h3>\n<p>下記二つはcall, cast共通</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{:noreply, new_state [, :hibernate | timeout]}\r\n\r\n{:stop, reason, new_state} // サーバに停止の合図をする</code></pre></div>\n<p>下記二つはhandle_callだけがレスポンスできる。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{:reply, response, new_state [ , :hibernate | timeout]} // クライアントにresponseを送る\r\n\r\n{:stop, reason, reply, new_state} // レスポンスを送り、サーバに停止の合図をする。</code></pre></div>\n<h1>プロセスの名前を付ける</h1>","frontmatter":{"title":"OTP:サーバ メモ","date":"November 02, 2021","description":"Elixir OTP:Server Memo"}},"previous":{"fields":{"slug":"/my-third-post/"},"frontmatter":{"title":"My Third Post"}},"next":null},"pageContext":{"id":"5899c709-ea06-54e2-9078-0972862a73f9","previousPostId":"0747d249-be79-5c83-9b32-21b3dfadaacf","nextPostId":null}},
    "staticQueryHashes": ["2841359383","3257411868"]}